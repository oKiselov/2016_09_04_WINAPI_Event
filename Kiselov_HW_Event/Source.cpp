/***********************************************************************************************
Написать программу, 
которая в одном потоке сохраняет в векторе структуры PROCESSENTRY32, устанавливает событие для 
второго потока, который должен отсортировать вектор структур PROCESSENTRY32 с помощью sort и лямбда выражения по полю cntThreads 
и установить событие для третьего потока, который должен вывести отсортированный вектор на консоль : Имя, ID, Количество потоков, 
установить событие для четвертого потока, который должен сохранить содержимое вектора в файл.
Для решения поставленной задачи использвать классы Thread / AutoEvent и обертку для дескрипторов объектов.
************************************************************************************************/

#include <Windows.h>
#include "Event.h"
#include "MyThreadBase.h"
#include "ProcessFinder.h"

// ИНИЦИАЛИЗАЦИЯ СТАТИЧЕСКИХ ПЕРЕМЕННЫХ В ОБЪЕКТЕ КЛАССА ProcessFinder ДЛЯ СКРИНШОТА ПРОЦЕССОВ
HANDLE ProcessFinder::wHandle = nullptr; 
std::vector<PROCESSENTRY32> ProcessFinder::vctrProcess32; 

int main()
{
	_wsetlocale(LC_ALL, L".866");

	// ДЕКЛАРИРОВАНИЕ 4 ПРОЦЕССОВ - ОБЪЕКТОВ КЛАССА MyThreadForSnapShot ДЛЯ РАБОТЫ С ПРОЦЕССАМИ КАК ОБЪЕКТАМИ 
	MyThreadForSnapShot hThread[4]; 
	// ДЕКЛАРИРОВАНИЕ ОБЪЕКТА  КЛАССА ProcessFinder ДЛЯ СКРИНШОТА ПРОЦЕССОВ
	ProcessFinder vecProcFind; 
	
	// ОБЪЕКТ КЛАССА ДЛЯ СКРИНШОТА ПРОЦЕССОВ ЗАПУСКАЕТ ФУНКЦИЮ СНЭПШОТ
	vecProcFind.StartSnapShotProcessInfo(); 

	// ДЕКЛАРИРОВАНИЕ ОБЪЕКТА КЛАССА СОБЫТИЕ И СОЗДАНИЕ ЕГО В АВТОМАТИЧЕСКОМ РЕЖИМЕ СБРОСА 
	AutoEvent currAutoEvent;
	currAutoEvent.Create(); 

	// ЗАПУСК 1-ГО ПОТОКА С ПЕРЕДАЧЕЙ ПАРАМЕТРА ENUM-SAVE ДЛЯ ЗАПУСКА В ПОТОКЕ 
	// ФУНКЦИИ КЛАССА ProcessFinder ДЛЯ СОХРАНЕНИЯ СТРУКТУР ДАННЫХ О ПРОЦЕССАХ 
	hThread[0].Run(Save);

	hThread[0].Wait(); 
	hThread[0].Close(); 
	// УСТАНОВКА СОБЫТИЯ ДЛЯ ВТОРОГО ПОТОКА, КОТОРЫЙ СТАНОВИТСЯ ПЛАНИРУЕМЫМ ПОСЛЕ ВЫПОЛНЕНИЯ 
	// ПЕРВЫМ ПОТОКОМ ФУНКЦИИ СОХРАНЕНИЯ СТРУКТУР ДАННЫХ О ПРОЦЕССАХ 
	currAutoEvent.Set(); 

	// ЗАПУСК ВТОРОГО ПОТОКА С ПЕРЕДАЧЕЙ ПАРАМЕТРА ENUM-Sort ДЛЯ ЗАПУСКА В ПОТОКЕ 
	// ФУНКЦИИ КЛАССА ProcessFinder ДЛЯ СОРТИРОВКИ СТРУКТУР ДАННЫХ О ПРОЦЕССАХ 
	hThread[1].Run(Sort);

	hThread[1].Wait();
	hThread[1].Close();	
	// УСТАНОВКА СОБЫТИЯ ДЛЯ ТРЕТЬЕГО ПОТОКА, КОТОРЫЙ СТАНОВИТСЯ ПЛАНИРУЕМЫМ ПОСЛЕ ВЫПОЛНЕНИЯ 
	// ВТОРЫМ ПОТОКОМ ФУНКЦИИ СОРТИРОВКИ СТРУКТУР ДАННЫХ О ПРОЦЕССАХ 
	currAutoEvent.Set();

	// ЗАПУСК ТРЕТЬЕГО ПОТОКА С ПЕРЕДАЧЕЙ ПАРАМЕТРА ENUM-Show ДЛЯ ЗАПУСКА В ПОТОКЕ 
	// ФУНКЦИИ КЛАССА ProcessFinder ДЛЯ ВЫВОДА СТРУКТУР ДАННЫХ О ПРОЦЕССАХ 
	hThread[2].Run(Show);

	hThread[2].Wait();
	hThread[2].Close();	
	// УСТАНОВКА СОБЫТИЯ ДЛЯ ЧЕТВЕРТОГО ПОТОКА, КОТОРЫЙ СТАНОВИТСЯ ПЛАНИРУЕМЫМ ПОСЛЕ ВЫПОЛНЕНИЯ 
	// ТРЕТЬИМ ПОТОКОМ ФУНКЦИИ ВЫВОДА СТРУКТУР ДАННЫХ О ПРОЦЕССАХ 
	currAutoEvent.Set();

	// ЗАПУСК ЧЕТЫВЕРТОГО ПОТОКА С ПЕРЕДАЧЕЙ ПАРАМЕТРА ENUM-File ДЛЯ ЗАПУСКА В ПОТОКЕ 
	// ФУНКЦИИ КЛАССА ProcessFinder ДЛЯ СОХРАНЕНИЯ В ФАЙЛ СТРУКТУР ДАННЫХ О ПРОЦЕССАХ 
	hThread[3].Run(File);
	hThread[3].Wait();
	hThread[3].Close();

	return 0; 
}